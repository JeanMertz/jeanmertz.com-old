events {}
http {
  include /etc/nginx/mime.types

  error_log syslog:server=unix:/run/systemd/journal/syslog,tag=webserver,nohostname;

  ssl_certificate /opt/etc/certs/jeanmertz.com.crt;
  ssl_certificate_key /opt/etc/certs/jeanmertz.com.key;
  ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
  ssl_protocols TLSv1.2 TLSv1.3;

  server {
    listen 443 default_server ssl http2;
    server_name jeanmertz.com;
    root /opt/www/jeanmertz.com/public;

    # Static file server improvements.
    #
    # see: https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content
    sendfile           on;
    sendfile_max_chunk 1m;
    tcp_nopush on;

    index index.html;

    location / {
      # Given a request `/hello/world.html`, redirect to `/hello/world`.
      if ($request_uri ~ ^/(.*)\.html$) {
          return 302 /$1;
      }

      # Given a request `/hello/world`, serve one of these:
      # * `$root/hello/world`
      # * `$root/hello/world.html`
      # * `$root/hello/world/index.html`
      #
      # The first check exists to make sure non-html files are also served,
      # e.g. `/hello/world.gif` is served as-is.
      #
      # Anything else follows the default 404 rules.
      try_files $uri $uri.html $uri/ =404;
    }

    # Personal blog.
    location /blog {
      return 404;
    }

    # An explanation of my dotfiles.
    location /dotfiles {
      return 404;
    }

    # My bookcase, including some reviews.
    location /books {
      return 404;
    }

    # An archive of all my tweets
    location /tweets {
      return 404;
    }

    # A public instance of Gitea to mirror any code maintained by me and hosted
    # on other platforms such as GitHub.
    location /git {
      return 404;
    }

    # Some details about myself.
    location /me {
      return 404;
    }

    # My curriculum vitae.
    location /career {
      return 404;
    }

    # Videos of myself, talks or live code streams.
    location /videos {
      return 404;
    }

    # Details about my current employer.
    location /employment {
      return 404;
    }

    # Self-hosted link shortener with analytics.
    #
    # The analytics are publicly available (and anonymised).
    location /link {
      return 404;
    }

    # Wiki with random notes I've made for myself.
    #
    # People can edit the notes, but have to have an approved account, or have
    # to have their changed approved by an approved account.
    location /wiki {
      return 404;
    }

    # A log of my daily working hours, showing non-descriptive blocks for the
    # work done for my employer.
    location /weblog {
      return 404;
    }

    # Publicly available anonymised analytics for my website.
    location /analytics {
      return 404;
    }

    # TODO: group these redirects together
    location /cv       { return 301 /career; }
    location /resume   { return 301 /career; }

    location /employer { return 301 /employment; }
    location /job      { return 301 /employment; }
    location /work     { return 301 /employment; }
  }

  # Redirect any HTTPS traffic on any subdomain for jeanmertz.com to the
  # top-level domain.
  #
  # TODO: add HSTS header on redirect.
  server {
    listen 443 ssl http2;
    server_name *.jeanmertz.com;

    return 301 https://jeanmertz.com$request_uri;
  }

  # Rewrite HTTP traffic to HTTPS.
  server {
    listen 80;
    server_name _;

    # DigitalOcean does not yet support IPv6 floating IPs.
    # listen [::]:80;

    # Special health endpoint used by the deployment script to determine if the
    # new server is accepting connections before swapping the floating IP from
    # the old to the new server.
    location = /health {
      return 200;
    }

    location / {
      return 301 https://jeanmertz.com$request_uri;
    }
  }
}
